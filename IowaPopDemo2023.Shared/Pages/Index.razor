@page "/"

<h1>Iowa County Population Change</h1>
<h2>2010-2019</h2>
<div class="header-section">
    <div class="header-column">
        <label>
            Search by County Name: <input type="text" @bind="searchText" />
            <button @onclick="() => searchText = string.Empty">Clear</button>
        </label>
        <br />
        <label>
            Sort By Column:
            <InputSelect @bind-Value="sortColumn">
                <option value="County">County</option>
                <option value="Pop2010">2010</option>
                <option value="Pop2011">2011</option>
                <option value="Pop2012">2012</option>
                <option value="Pop2013">2013</option>
                <option value="Pop2014">2014</option>
                <option value="Pop2015">2015</option>
                <option value="Pop2016">2016</option>
                <option value="Pop2017">2017</option>
                <option value="Pop2018">2018</option>
                <option value="Pop2019">2019</option>
                <option value="PopulationChange">Population Change</option>
            </InputSelect>
            <InputRadioGroup @bind-Value="sortDirection" Name="Direction">
                <InputRadio Name="Direction" Value="@("Ascending")" />Ascending
                <InputRadio Name="Direction" Value="@("Descending")" />Descending
            </InputRadioGroup>
            <button @onclick="SortRows">Sort</button>
        </label>
    </div>
    <div class="header-column header-column-right">
        <canvas id="chartCanvas" @ref="chartCanvas" width="400" height="300"></canvas>
    </div>
</div>
@if (windowWidth > 800) 
{
    <table>
        <thead>
            <tr>
                <th>County</th>
                @for(int i = 2010; i < 2020; i++)
                {
                    <th>@i</th>
                }
                <th>Population Change</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var countyRow in filteredRows)
            {

                <tr @onclick="@(() => RowClicked(countyRow))">
                    <td>@countyRow.County</td>
                    <td>@countyRow.Pop2010.ToString("N0")</td>
                    <td>@countyRow.Pop2011.ToString("N0")</td>
                    <td>@countyRow.Pop2012.ToString("N0")</td>
                    <td>@countyRow.Pop2013.ToString("N0")</td>
                    <td>@countyRow.Pop2014.ToString("N0")</td>
                    <td>@countyRow.Pop2015.ToString("N0")</td>
                    <td>@countyRow.Pop2016.ToString("N0")</td>
                    <td>@countyRow.Pop2017.ToString("N0")</td>
                    <td>@countyRow.Pop2018.ToString("N0")</td>
                    <td>@countyRow.Pop2019.ToString("N0")</td>
                    <td style="font-weight: bold; @(countyRow.PopulationChange >= 0 ? "color: green" : "color:red")">
                        @countyRow.PopulationChange.ToString("N0")
                    </td>

                </tr>
            }
        </tbody>
    </table>
}
else
{
    foreach (var countyRow in filteredRows)
    {
        <div class="panel" @onclick="@(() => RowClicked(countyRow))">
            <label><b>@countyRow.County</b></label>
            <label><b>2010: </b>@countyRow.Pop2010.ToString("N0")</label>
            <label><b>2011: </b>@countyRow.Pop2011.ToString("N0")</label>
            <label><b>2012: </b>@countyRow.Pop2012.ToString("N0")</label>
            <label><b>2013: </b>@countyRow.Pop2013.ToString("N0")</label>
            <label><b>2014: </b>@countyRow.Pop2014.ToString("N0")</label>
            <label><b>2015: </b>@countyRow.Pop2015.ToString("N0")</label>
            <label><b>2016: </b>@countyRow.Pop2016.ToString("N0")</label>
            <label><b>2017: </b>@countyRow.Pop2017.ToString("N0")</label>
            <label><b>2018: </b>@countyRow.Pop2018.ToString("N0")</label>
            <label><b>2019: </b>@countyRow.Pop2019.ToString("N0")</label>
            <label style="font-weight: bold; @(countyRow.PopulationChange >= 0 ? "color: green" : "color:red")">
                <b>Population Change: </b>@countyRow.PopulationChange.ToString("N0")</label>
        </div>
    }
}

@code {
    [Inject]
    public HttpClient HttpClient { get; set; } = default!;

    [Inject]
    public IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("https://api.census.gov/data/2019/pep/population?get=NAME,DATE_CODE,POP&for=county:*&in=state:19");
        var content = await response.Content.ReadAsStringAsync();
        var rows = JsonSerializer.Deserialize<List<string[]>>(content)!;
        rows.RemoveAt(0); // Remove header row
        var counties = rows.Select(r => r[0].Replace(", Iowa", "")).Distinct().Order().ToList();
        foreach (string county in counties)
        {
            var popDiff = int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "12")[2]) -
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "1")[2]);
            countyRows.Add(new CountyYearPopulation(county, 
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "3")[2]),
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "4")[2]),
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "5")[2]),
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "6")[2]),
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "7")[2]),
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "8")[2]),
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "9")[2]),
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "10")[2]),
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "11")[2]),
                int.Parse(rows.First(r => r[0].Contains(county) && r[1] == "12")[2]),
                popDiff));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            functionsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/IowaPopDemo2023.Shared/functions.js");
            windowWidth = await functionsModule.InvokeAsync<int>("getWindowWidth");
        }
    }

    private void SortRows() 
    {
        if (sortDirection == "Ascending")
        {
            countyRows = countyRows.OrderBy(r => r.GetType().GetProperty(sortColumn)?.GetValue(r, null)).ToList();
        }
        else
        {
            countyRows = countyRows.OrderByDescending(r => r.GetType().GetProperty(sortColumn)?.GetValue(r, null)).ToList();
        }
    }

    private async Task RowClicked(CountyYearPopulation countyRow)
    {
        await functionsModule!.InvokeVoidAsync("createChart", countyRow.ToDataSet, $"{countyRow.County} Population 2010-2019", 
            columnNames, chartCanvas);
    }

    private CountyYearPopulation stateRow => new CountyYearPopulation("State of Iowa",
        countyRows.Sum(r => r.Pop2010),
        countyRows.Sum(r => r.Pop2011),
        countyRows.Sum(r => r.Pop2012),
        countyRows.Sum(r => r.Pop2013),
        countyRows.Sum(r => r.Pop2014),
        countyRows.Sum(r => r.Pop2015),
        countyRows.Sum(r => r.Pop2016),
        countyRows.Sum(r => r.Pop2017),
        countyRows.Sum(r => r.Pop2018),
        countyRows.Sum(r => r.Pop2019),
        countyRows.Sum(r => r.PopulationChange));
    
    private List<CountyYearPopulation> filteredRows => string.IsNullOrWhiteSpace(searchText) 
        ? countyRows.Concat(new [] {stateRow}).ToList()
        : countyRows.Where(r => r.County.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList()
            .Concat(new [] {stateRow}).ToList();

    private List<CountyYearPopulation> countyRows = new List<CountyYearPopulation>();
    private string searchText = string.Empty;
    private string sortColumn = "County";
    private string sortDirection = "Ascending";
    private IJSObjectReference? functionsModule;
    private int windowWidth;
    private ElementReference chartCanvas;
    private string[] columnNames = new string[] { "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019" };
    record CountyYearPopulation(string County, int Pop2010, int Pop2011, int Pop2012, int Pop2013, int Pop2014, int Pop2015, int Pop2016, int Pop2017, int Pop2018, int Pop2019, int PopulationChange)
    {
        public int[] ToDataSet => new int[] { Pop2010, Pop2011, Pop2012, Pop2013, Pop2014, Pop2015, Pop2016, Pop2017, Pop2018, Pop2019 };
    }
}